module CU
(
	input ClearAll, CLK, trig, ClearEntry,
	input [3:0]value,
	output reg Reset, LoadA, LoadB, AddSub, LoadR, IUAU
);

reg [2:0] state;

parameter S0 = 3'b000;
parameter S1 = 3'b001;
parameter S2 = 3'b010;
parameter S3 = 3'b011;
parameter S4 = 3'b100;

always @(posedge trig, negedge ClearAll)
begin 
	if(ClearAll == 0)
		state <= S0;
		
	else
	begin 
		case(state)
			S0: begin state <= S1; end 
			S1: begin if(value == 4'b1010 || value == 4'b1011) begin state <= S2; end else state <= S1; end
			S2: begin state <= S3; end
			S3: begin if(value == 4'b1111) state <= S4; else state <= S3; end
			S4: begin state <= S4; end
		endcase
	end
end

always @(state)
begin
	case(state)
		S0: begin Reset = 0; LoadA  = 1; LoadB = 1; LoadR = 1; IUAU = 0; AddSub = 0; end
		S1: begin Reset = 1; LoadA  = 0; LoadB = 1; LoadR = 1; IUAU = 0; AddSub = value[0]; end	
		S2: begin Reset = 1; LoadA  = 1; LoadB = 1; LoadR = 1; IUAU = 0; AddSub = AddSub; end
		S3: begin Reset = 1; LoadA  = 1; LoadB = 0; LoadR = 1; IUAU = 0; AddSub = AddSub; end
		S4: begin Reset = 1; LoadA  = 1; LoadB = 1; LoadR = 0; IUAU = 1; AddSub = AddSub; end
	endcase
end

endmodule