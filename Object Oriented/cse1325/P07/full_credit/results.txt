====================
HOMEWORK P07 RESULTS
====================

Fall 2024


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Boggle command line arguments ([#boards] and if not default [boardSize])did you use to achieve a 30 to 45 second runtime? Note: We're only interested in the "real" seconds for this question.

150

QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** With bash, you can run all of these with a single command if you like, replacing "90" with whatever Boggle command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do echo ; echo $i Threads; time java Boggle 150 - $i ; done

1 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m39.321s
user    0m41.672s
sys     0m2.797s

2 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m30.253s
user    0m42.031s
sys     0m2.531s

3 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.988s
user    0m42.547s
sys     0m2.359s

4 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.542s
user    0m43.484s
sys     0m2.672s

5 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.417s
user    0m48.844s
sys     0m3.703s

6 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.579s
user    0m55.172s
sys     0m3.297s

7 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.402s
user    0m59.281s
sys     0m3.109s

8 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.917s
user    1m3.250s
sys     0m3.016s

9 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.312s
user    1m8.266s
sys     0m3.422s

10 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.820s
user    1m14.469s
sys     0m3.734s

11 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m23.692s
user    1m6.828s
sys     0m3.750s

12 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.953s
user    1m21.797s
sys     0m2.984s

13 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.958s
user    1m25.219s
sys     0m3.813s

14 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.814s
user    1m29.203s
sys     0m4.234s

15 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.236s
user    1m38.000s
sys     0m4.078s

16 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.412s
user    1m33.000s
sys     0m4.359s

QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

Adding more threads does not continue to speed up the program. More threads slow down the program slightly because of the synchronized(lock). 
When multiple threads are trying to access the same resource inside the protection of the synchronized(lock), 
the threads must wait for the current thread to finish accessing the resource. This prevents thread interference, but prevents the program from
running increasingly faster, as adding more threads also causes more threads to wait for other threads to finish using the shared resource. 

QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

Adding more threads can increase system load because we can add more threads than CPU cores. This fact combined with the shared resource under the 
synchronized(lock) causes each thread to wait for the next to finish with this shared resource. Since these threads must wait, more CPU and memory resources
are used to maintain these threads while they wait for the shared resource. So in turn, more threads = more CPU and memory resources. 

BONUS
=====

QUESTION 5: Time your version of Boggle as you did for the full credit version. Is this additional layer of threading faster, slower, or roughly equivalent in performance? Why?

This additional layer of threading is approximately the same in performance. This is because the threads must still wait for a shared resource under synchronized(lock).
Although each thread is working until there are no more boards, they are limited because they must wait for another finished thread to get its board before it can grab the next. 

YOUR Timing: 
1 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m39.192s
user    0m41.844s
sys     0m2.313s

2 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m30.885s
user    0m42.719s
sys     0m1.766s

3 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m27.576s
user    0m42.641s
sys     0m1.750s

4 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.465s
user    0m44.063s
sys     0m2.188s

5 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.723s
user    0m50.047s
sys     0m2.500s

6 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.304s
user    0m55.078s
sys     0m2.609s

7 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.822s
user    0m59.344s
sys     0m2.531s

8 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m23.677s
user    0m56.359s
sys     0m3.156s

9 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.737s
user    1m9.438s
sys     0m3.172s

10 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.911s
user    1m16.656s
sys     0m2.703s

11 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.808s
user    1m19.422s
sys     0m3.641s

12 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.657s
user    1m25.703s
sys     0m3.391s

13 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.765s
user    1m28.844s
sys     0m4.297s

14 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.133s
user    1m35.000s
sys     0m3.906s

15 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m26.430s
user    1m33.031s
sys     0m4.813s

16 Threads

Found 55301 solutions
Hash is 0x0FEF19BB

real    0m25.720s
user    1m36.938s
sys     0m4.484s

